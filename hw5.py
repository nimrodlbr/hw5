import pandas as pd
import numpy as np
import pathlib


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname):
        path = pathlib.Path(data_fname)
        if path.exists():
            self.data_fname = pathlib.Path(data_fname)
        else: 
            raise ValueError('No such file or invalid path')

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self):
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        bins = np.arange(0, 110, 10)
        values_for_hist = self.data.age.values
        hist, bins = np.histogram(values_for_hist, bins=bins)
        self.data.age.hist(bins=np.arange(0, 110, 10))
        return (hist, bins)

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but
        with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        ind_list = []
        for i, addr in enumerate(self.data.email):
            flag = 0
            if (addr[0] != '@') and (addr[-1] != '@'):
                if addr.count('@') == 1:
                    if addr.count('@.') == 0:
                        if addr[0] != '.' and addr[-1] != '.':
                            if addr.count('.') == 1:
                                flag = 1
            if flag == 1:
                ind_list.append(i)
            else:
                next
        df = self.data.loc[ind_list]
        df.index = range(len(df))
        return df

    def fill_na_with_mean(self):
        """
        Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
                Row indices of the students that 
                their new grades were generated
        """
        cols_for_means = ['q1', 'q2', 'q3', 'q4', 'q5']
        questions = self.data[cols_for_means]
        navals = questions[questions.isnull().any(axis=1)]
        arr = np.array(navals.index.values)
        arr_cols_per_row = []
        means = []
        for row in arr:
            snip = navals.loc[row]
            snip_nans = []
            for ind in snip.index:
                if np.isnan(snip.loc[ind]):
                    snip_nans.append(ind)
            arr_cols_per_row.append(snip_nans)
            values_for_mean = snip.drop(index=snip_nans).values
            this_mean = np.sum(values_for_mean) / len(values_for_mean)
            means.append(this_mean)
        for e, i in enumerate(arr):
            self.data.at[i, arr_cols_per_row[e]] = means[e]

        return self.data, arr

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
    with it.

    If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
    score should be NA. Otherwise, the score is simply the mean of the other grades.
    The datatype of score is UInt8, and the floating point raw numbers should be
    rounded down.

    Parameters
    ----------
    maximal_nans_per_sub : int, optional
        Number of allowed NaNs per subject before giving a NA score.

    Returns
    -------
    pd.DataFrame
        A new DF with a new column - "score".
    """
        cols_for_means = ['q1','q2','q3','q4','q5']
        questions = self.data[cols_for_means]
        means = questions.mean(axis=1)
        means = np.floor(means.values)
        self.data['score'] = means
        for row in self.data.index:
            qs = self.data.loc[row][cols_for_means]
            if qs.count() < 5-maximal_nans_per_sub:
                self.data.at[row, 'score'] = np.nan
            else:
                self.data.at[row, 'score'] = np.floor(self.data.at[row, 'score'])
        scorelist = self.data['score']
        self.data['score'] = pd.Series(scorelist.tolist(), dtype='UInt8')
        return self.data

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.
        
        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """ 
        
        df = self.data
        df = self.data.dropna(subset=['age'])
        mask = df['age'] > 40
        df2 = df.drop(columns='age')
        df2['age'] = mask
        df2 = df2.set_index(['gender', 'age'], append=True)
        qs = ['q1', 'q2', 'q3', 'q4', 'q5']
        grouped_df = df2[qs].groupby(level=['gender', 'age']).mean()
        return grouped_df
